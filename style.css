* {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}

body {
	font-family: Verdana, Geneva, Tahoma, sans-serif;
	font-size: 2.5em;
	color: whitesmoke;
	background-color: whitesmoke;
}

/* parent/container properties */

.container {
	/* grid properties below */
	display: grid; /* grid | inline-grid */
	/* defines element as grid container */
	grid-template-columns: [c-line-1] 1fr [c-line-2] 2fr [c-line-3] 150px [c-line-4] 2fr [c-line-5] 1fr [c-line-6];
	grid-template-rows: repeat(5, 200px);
	/* values represent the track size, and the space between them represents the grid line */
	/* can be length, percentage or fraction (fr) */
	/* bracket syntax for line names | name as you like | can have multiple names e.g. [row1-end row2-start] */
	/* BUT automatically named with positive numbers (so row lines will be 1, 2, 3, 4) */
	/* repeat notation for repeating parts e.g. repeat(3, 20px [col-start]) */
	/* when using fr, free space is calculated after any non-flexible items - so above, free space available to the fr units doesn’t include the 150px */
	grid-template-areas:
		"header header header header header"
		"sidebar main main . aside"
		"footer footer footer footer footer"; /*  "<grid-area-name> | . (empty grid cell) | none (no grid areas defined) | ..." */
	/* Defines a grid template by referencing the names of the grid areas which are specified with the grid-area property. */
	/* Repeating the name of a grid area causes the content to span those cells. */
	/* A period signifies an empty cell. */
	/* The syntax itself provides a visualization of the structure of the grid. */
	/* Each row must have = # cells. */
	/* lines automatically named */
	/* if the name of your grid area is foo, the name of the area’s starting row line and starting column line will be foo-start */
	/* and the name of its last row line and last column line will be foo-end - so lines can have multiple names*/
	/* grid-template is shorthand for the above 3 properties, but just use those for now */
	gap: 0.7em 0.5em;
	/* specifice grid line/gutter width */
	/* shorthand for: */
	/* row-gap: 0.7em; */
	/* column-gap: 0.5em; */
	justify-items: stretch; /* start | end | center | stretch (default) */
	/* can also use justify-self on items */
	align-items: stretch; /* start | end | center | stretch (default) | baseline */
	/* can also use align-self on items */
	place-items: stretch;
	/* both the above at once */
	justify-content: stretch; /* start | end | center | stretch | space-around | space-between | space-evenly */
	/* just example, not working in this instance */
	align-content: space-evenly; /* start | end | center | stretch | space-around | space-between | space-evenly */
	/* use above if total grid size less than container size (happens when px used for e.g. as per rows in this eg */
	place-content: space-evenly;
	/* above two properties together */
	/* just example, not working in this instance */
	grid-auto-columns: auto; /*  can be a length, a percentage, or a fraction of the free space in the grid (using the fr unit) */
	grid-auto-rows: auto; /*  can be a length, a percentage, or a fraction of the free space in the grid (using the fr unit) */
	/* pecifies the size of any auto-generated grid tracks (aka implicit grid tracks) */
	/* implicit tracks get created when there are more grid items than cells in the grid or when a grid item is placed outside of the explicit grid */
	/* explained well in css tricks example */
	grid-auto-flow: row; /* row (default) | column | row dense | column dense */
	/* defines flow of not explicitely placed items */
	/* dense only changes visual order of items so can be bad for accessibility */
	/* explained well in css tricks example */
	/* grid: ; can be used as shorthand for  grid-template-rows, grid-template-columns, grid-template-areas, grid-auto-rows, grid-auto-columns, and grid-auto-flow */
}

/* child/item properties */

.item {
	min-width: 100px;
	min-height: 100px;
	display: flex;
	justify-content: center;
	align-items: center;
}

#item1 {
	background-color: palevioletred;
	grid-area: header; /* <name> | <row-start> / <column-start> / <row-end> / <column-end> */
	justify-self: stretch; /* start | end | center | stretch (default) */
	align-self: end; /* start | end | center | stretch (default) */
	/* place-self */
}

#item2 {
	background-color: lightskyblue;
	grid-area: sidebar; /* <name> | <row-start> / <column-start> / <row-end> / <column-end> */
}

#item3 {
	background-color: lightsalmon;
	grid-area: main; /* <name> | <row-start> / <column-start> / <row-end> / <column-end> */
}

#item4 {
	background-color: palegreen;
	grid-area: aside; /* <name> | <row-start> / <column-start> / <row-end> / <column-end> */
}

#item5 {
	background-color: lightpink;
	grid-area: footer; /* <name> | <row-start> / <column-start> / <row-end> / <column-end> */
}

#item6 {
	background-color: lightslategray;
	grid-column: 3/5; /* <number> | <name> | span <number> | span <name> | auto */
	grid-row: 4/5; /* <number> | <name> | span <number> | span <name> | auto */
	/* longhand versions below */
	/* grid-column-start: <number> | <name> | span <number> | span <name> | auto */
	/* grid-column-end: <number> | <name> | span <number> | span <name> | auto */
	/* grid-row-start: <number> | <name> | span <number> | span <name> | auto */
	/* grid-row-end: <number> | <name> | span <number> | span <name> | auto */
}
